MODEM_PORT=$(uci -q get xmm-modem.@xmm-modem[0].port)
MODEM_DEVICE=$(uci -q get xmm-modem.@xmm-modem[0].device)
MODEM_INTERFACE=$(uci -q get xmm-modem.@xmm-modem[0].interface)
MODEM_APN=$(uci -q get xmm-modem.@xmm-modem[0].apn)
MODEM_AUTH_TYPE=$(uci -q get xmm-modem.@xmm-modem[0].auth_type)
MODEM_AUTH_USERNAME=$(uci -q get xmm-modem.@xmm-modem[0].auth_username)
MODEM_AUTH_PASSWORD=$(uci -q get xmm-modem.@xmm-modem[0].auth_password)
MODEM_METRIC=$(uci -q get xmm-modem.@xmm-modem[0].metric)
MODEM_ENABLED=$(uci -q get xmm-modem.@xmm-modem[0].enable)
DISABLE_MAX_RETRIES=$(uci -q get xmm-modem.@xmm-modem[0].disable_max_retries)
CONNECTION_MAX_RETRIES=$(uci -q get xmm-modem.@xmm-modem[0].max_retries)
RETRY_WAIT=$(uci -q get xmm-modem.@xmm-modem[0].retry_wait)
CONNECTION_WAIT=$(uci -q get xmm-modem.@xmm-modem[0].connection_wait)
FORCE_LINK=$(uci -q get xmm-modem.@xmm-modem[0].force_link)
WATCHDOG_ENABLED=$(uci -q get xmm-modem.@xmm-modem[0].enable_watchdog)
MODEM_NODE="xmm-modem"

check_xmm_configuration() {
  logger -t "${MODEM_NODE}" "xmm-modem interface detected [${MODEM_DEVICE} - ${MODEM_INTERFACE}]"
  if [ ${MODEM_ENABLED} -ne 1 ]; then
    logger -t "${MODEM_NODE}" "xmm-modem is disabled"
    exit 0
  fi
  if [[ -z ${MODEM_APN} ]]; then
    logger -t "${MODEM_NODE}" "APN not specified, using default APN (internet)"
    MODEM_APN="internet"
  fi
}

xmm_connect() {
  [[ -z ${RETRY_WAIT} ]] && RETRY_WAIT=0
  CONNECT_SCRIPT="/etc/gcom/xmm-modem/xmm-connect.gcom"
  [[ ${MODEM_AUTH_TYPE} == "pap" || ${MODEM_AUTH_TYPE} == "chap" ]] && CONNECT_SCRIPT="/etc/gcom/xmm-modem/xmm-connect_auth.gcom"
  AUTH_CREDENTIALS="USERNAME=\"${MODEM_AUTH_USERNAME}\" PASSWORD=\"${MODEM_AUTH_PASSWORD}\""
  case ${MODEM_AUTH_TYPE} in
    "none")
      AUTH_TYPE=0
      AUTH_CREDENTIALS=""
      ;;
    "pap")
      AUTH_TYPE=1
      ;;
    "chap")
      AUTH_TYPE=2
      ;;
  esac
  logger -t "${MODEM_NODE}" "Connecting modem"
  logger -t "${MODEM_NODE}" "Connection configuration: APN=\"${MODEM_APN}\" AUTH_TYPE=\"${MODEM_AUTH_TYPE}\" ${AUTH_CREDENTIALS}"
  [[ ${DISABLE_MAX_RETRIES} -gt 0 ]] && logger -t "${MODEM_NODE}" "[WARNING] max retries is disabled. If you wish to abort connection procedure, you may unplug device directly"
  XMM_CONNECT=$(APN=${MODEM_APN} TYPE=${AUTH_TYPE} USERNAME=${MODEM_AUTH_USERNAME} PASSWORD=${MODEM_AUTH_PASSWORD} gcom -d ${MODEM_PORT} -s ${CONNECT_SCRIPT})
  IP_ADDRESS=$(echo "${XMM_CONNECT}" | awk -F [,] '/^\+CGPADDR: 1/{gsub("\"", ""); print $2}')
  if [[ ! -z ${IP_ADDRESS} ]]; then
    logger -t "${MODEM_NODE}" "Modem connected"
  else
    RETRIES=1
    until [ ${IP_ADDRESS} ]; do
      if ! lsusb | grep -q '8087:095a'; then
        logger -t "${MODEM_NODE}" "Modem unplugged"
        logger -t "${MODEM_NODE}" "Modem connection failed"
        exit 1
      fi
      [[ ${RETRY_WAIT} -gt 0 ]] && sleep ${RETRY_WAIT}
      logger -t "${MODEM_NODE}" "Retrying connection: ${RETRIES}"
      XMM_CONNECT=$(APN=${MODEM_APN} TYPE=${AUTH_TYPE} USERNAME=${MODEM_AUTH_USERNAME} PASSWORD=${MODEM_AUTH_PASSWORD} gcom -d ${MODEM_PORT} -s ${CONNECT_SCRIPT})
      IP_ADDRESS=$(echo "${XMM_CONNECT}" | awk -F [,] '/^\+CGPADDR: 1/{gsub("\"", ""); print $2}')
      if [[ ! -z ${IP_ADDRESS} ]]; then
        logger -t "${MODEM_NODE}" "Modem connected to carrier network"
        break
      else
        RETRIES=$((${RETRIES}+1))
        if [[ ${DISABLE_MAX_RETRIES} -gt 0 ]]; then
          if lsusb | grep -q '8087:095a'; then
            continue
          fi
        fi
        if [ ${RETRIES} -gt ${CONNECTION_MAX_RETRIES} ]; then
          logger -t "${MODEM_NODE}" "Modem connection failed"
          exit 1
        fi
      fi
    done
  fi
}

xmm_disconnect() {
  logger -t "${MODEM_NODE}" "Disconnecting modem"
  DISCONNECT_SCRIPT="/etc/gcom/xmm-modem/xmm-disconnect.gcom"
  gcom -d ${MODEM_PORT} -s ${DISCONNECT_SCRIPT}
  logger -t "${MODEM_NODE}" "Modem disconnected"
}

xmm_configuration() {
  logger -t "${MODEM_NODE}" "Configuring network interface"
  CONFIGURATION_SCRIPT="/etc/gcom/xmm-modem/xmm-config.gcom"
  XMM_CONFIGURATION=$(gcom -d ${MODEM_PORT} -s ${CONFIGURATION_SCRIPT})
  IP_ADDRESS=$(echo "${XMM_CONFIGURATION}" | awk -F [,] '/^\+CGPADDR: 1/{gsub("\"|\r",""); print $2}'| sed 's/[[:space:]]//g')
  DNS=$(echo "${XMM_CONFIGURATION}" | awk -F [,] '/^\+XDNS: 1/{gsub("\r|\"",""); print $2" "$3}' | sed 's/^[[:space:]]//g')
  for d in ${DNS}; do
    if [ $(echo "${NS}" | grep "${d}") ]; then
      false
    elif [ "${d}" != "0.0.0.0" ]; then
      [[ -z ${NS} ]] && NS=${d} || NS="${NS} ${d}"
    fi
  done
  DNS=${NS}
  if [ ${IP_ADDRESS} ]; then
    GATEWAY=$(echo ${IP_ADDRESS} | awk -F [.] '{print $1"."$2"."$3".1"}')
  else
    logger -t "${MODEM_NODE}" "Failed to obtain IP address"
    exit 1
  fi
  logger -t "${MODEM_NODE}" "Obtained network configuration: IP=\"${IP_ADDRESS}\" DNS=\"${DNS}\""
  uci set network.${MODEM_INTERFACE}=interface
  uci set network.${MODEM_INTERFACE}.proto='static'
  uci set network.${MODEM_INTERFACE}.ifname=${MODEM_DEVICE}
  [[ ${FORCE_LINK} -gt 0 ]] && uci set network.${MODEM_INTERFACE}.force_link='1' || uci -q delete network.${MODEM_INTERFACE}.force_link
  uci set network.${MODEM_INTERFACE}.ipaddr=$(echo ${IP_ADDRESS})
  uci set network.${MODEM_INTERFACE}.netmask=255.255.255.0
  uci set network.${MODEM_INTERFACE}.gateway=${GATEWAY}
  [[ ${MODEM_METRIC} -gt 0 ]] && uci set network.${MODEM_INTERFACE}.metric=${MODEM_METRIC} || uci -q delete network.${MODEM_INTERFACE}.metric
  if [ -n "${DNS}" ]; then
    uci set network.${MODEM_INTERFACE}.dns="$(echo "$DNS")"
  else
    uci set network.${MODEM_INTERFACE}.dns="94.140.14.14 94.140.15.15"
  fi
  if [ ${IP_ADDRESS} ]; then
    ip link set dev ${MODEM_DEVICE} arp off
    uci commit network
    reload_config
  fi
  logger -t "${MODEM_NODE}" "Network interface configured"
}

xmm_data() {
  logger -t "${MODEM_NODE}" "Activating data channel"
  DATA_SCRIPT="/etc/gcom/xmm-modem/xmm-data.gcom"
  gcom -d ${MODEM_PORT} -s ${DATA_SCRIPT}
}

xmm_start() {
  if ip link show ${MODEM_DEVICE} | grep -q "state UP"; then
    exit 0
  fi
  check_xmm_configuration
  xmm_connect
  xmm_configuration
  xmm_data
  [[ ${CONNECTION_WAIT} -gt 0 ]] && sleep ${CONNECTION_WAIT}
  logger -t "${MODEM_NODE}" "Connection established"
}

watchdog_start() {
  if [[ ${WATCHDOG_ENABLED} -eq 1 ]]; then
    logger -t "${MODEM_NODE}" "Starting watchdog"
    /usr/bin/xmm75xx-watchdog > /dev/null 2>&1 &
    logger -t "${MODEM_NODE}" "Watchdog started"
  fi
}

watchdog_stop() {
  if [[ ${WATCHDOG_ENABLED} -eq 1 ]]; then
    logger -t "${MODEM_NODE}" "Stopping watchdog"
    /usr/bin/xmm75xx-watchdog -k > /dev/null 2>&1 &
    logger -t "${MODEM_NODE}" "Watchdog stopped"
  fi
}

case ${ACTION} in
  ifup)
    case ${DEVICE} in
      ${MODEM_DEVICE})
        xmm_start
        ;;
    esac
    case ${INTERFACE} in
      ${MODEM_INTERFACE})
        watchdog_start
        ;;
    esac
    ;;
  ifdown)
    case ${INTERFACE} in
      ${MODEM_INTERFACE})
        watchdog_stop
        xmm_disconnect
      ;;
    esac
  ;;
esac

